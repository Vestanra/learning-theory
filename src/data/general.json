[
    {
        "id":"ot1",
        "question": "Що таке мініфікований код?",
        "answer": "Мініфікований код - це вихідний код програми, який був оброблений за допомогою програми мініфікації. Мініфікація полягає в усуненні зайвих символів з вихідного коду програми, таких як пробіли, коментарі, та інші знаки, які не є обов'язковими для виконання програми. Мініфікація дозволяє зменшити розмір файлу програми, що може покращити швидкодію загрузки веб-сторінок та зменшити витрати трафіку даних. Однак вихідний код після мініфікації може бути важко читати і розуміти для людини."
    },
    {
        "id":"ot2",
        "question": "Що таке транспільований  код?",
        "answer": "Транспіляція - це процес перетворення вихідного коду програми з одного мовного середовища на інше. Зазвичай транспіляція використовується для перетворення коду з високорівневих мов програмування, таких як JavaScript, на код мови, що має більш широку підтримку, або низькорівневих мов, таких як машинний код або код асемблера. Також транспіляція може використовуватися для перетворення коду з одного стандарту на інший, наприклад, для підтримки старших версій стандартів мови програмування."
    },
    {
        "id":"ot3",
        "question": "Що таке компілятор та інтерпретатор яка між ними різниця?",
        "answer": "Інтерпретатор читає програму і, безпосередньо взаємодіючи з операційною системою, виконує її. Перетворення і виконання програми відбувається по рядках. На відміну від інтерпретаторів, компілятор повністю перетворює початковий код програми в машинний, який операційна система може виконати самостійно."
    },
    {
        "id":"ot4",
        "question": "Що таке EcmaScript?",
        "answer": "Стандарт мови програмування, затверджений міжнародною організацією ECMA згідно зі специфікацією ECMA-262. Найвідомішими реалізаціями стандарту є мови JavaScript, JScript та ActionScript, які широко використовується у веброзробці."
    },
    {
        "id":"ot5",
        "question": "Як працюють браузери",
        "answer": "1.Перший етап при завантаженні - навігація. Спочатку іде розпізнавання протоколу (HTTP або HTTPS) та запит до DNS-сервера для перетворення доменного імені на IP-адресу сервера. 2. Встановлення TCP-з'єднання із сервером, а також при потребі поверх TCP TLS/SSL-з'єднання (захищене протоколами). 3. Відправка HTTP-запиту та отримання відповіді від сервера. 4. Парсинг - отримані дані перетворюються на DOM (визначає вміст документа) і CSSOM, відбувається компіляція JS та побудова дерева достопності (AOM). 5. Рендеринг -  стилізація, компонування (layout), відмальовування (paint), в деяких випадках композиція (composition). 6. Виконання скриптів відбувається після первинного рендерингу сторінки. Скрипти можуть змінювати вміст або стилі сторінки, що може призвести до повторного виконання layout або painting. Якщо скрипти мають атрибут defer або async, їх обробка відбувається дещо по-іншому. defer: Скрипти з атрибутом defer завантажуються паралельно з документом, але виконуються лише після завершення парсингу HTML (після завершення layout).async: Скрипти з атрибутом async завантажуються паралельно і виконуються, як тільки завантаження завершено, без очікування завершення парсингу HTML."
    },
    {
        "id": "ot6",
        "question": "Критичні етапи рендеринга",
        "answer": "Це серія кроків, які браузер виконує для перетворення HTML, CSS і JavaScript в інтерактивну веб-сторінку. 1. Обробка HTML (побудова DOM). DOM будується інкрементально, що означає, що браузер може відображати контент по мірі його отримання. 2. Обробка CSS (побудова CSSOM) Паралельно з побудовою DOM браузер обробляє CSS-стилі для створення CSS Object Model. CSSOM — це дерево стилів, яке відповідає за те, як елементи DOM виглядатимуть на екрані. CSSOM не може бути побудоване до тих пір, поки всі CSS-файли не будуть завантажені та проаналізовані. 3. Побудова рендер-дерева (Render Tree). Браузер об'єднує DOM та CSSOM для створення рендер-дерева, яке містить тільки ті елементи, які будуть фактично відображені на сторінці (не включає елементи з display: none). Визначає, які елементи з будуть зображені на екрані і як вони виглядатимуть. 4. Вирахування макету (Layout, Reflow). Браузер визначає точне розташування кожного елемента на сторінці, виходячи з його розмірів, відступів, позицій та інших стилів. Цей процес також відомий як рефлоу (reflow). Розраховуються координати і розміри всіх елементів, що потрібно для коректного відображення на екрані. 5. Рендеринг (Paint) Після завершення макету браузер переходить до малювання елементів на екрані. Він фарбує пікселі в області, визначені на попередніх етапах. Браузер малює фон, текст, зображення, градієнти тощо. 6. Композиція (Compositing Layers) Під час цього етапу браузер може розділити сторінку на кілька шарів (layers). Це допомагає оптимізувати анімації, прокручування та взаємодію користувача зі сторінкою. Після цього браузер об’єднує ці шари і відображає готову картинку на екрані. Цей етап також відповідає за оновлення зображення при взаємодії з користувачем."
    },
    {
        "id": "ot7",
        "question": "Сканер передзавантаження (Preload Scanner)",
        "answer": "Це механізм браузера, який працює паралельно з основним процесом рендерингу веб-сторінки та призначений для прискорення завантаження важливих ресурсів у фоновому режимі. Основна функція цього механізму — виявляти та завантажувати ресурси (скрипти, стилі, зображення) ще до того, як браузер їх фактично потребуватиме для рендерингу сторінки."
    },
    {
        "id": "ot8",
        "question": "Побудова дерева доступності (Accessibility Tree)",
        "answer": "Це процес, при якому браузер створює структуру, що описує доступний для користувачів із обмеженими можливостями вміст веб-сторінки. Використання ARIA-атрибутів допомагають зробити елементи більш доступними. Наприклад:role='button' вказує, що елемент виконує функцію кнопки. aria-label додає текстовий опис елементу. aria-hidden='true' приховує елемент від допоміжних технологій, навіть якщо він присутній на екрані."
    },
    {
        "id": "ot9",
        "question": "Painting (малювання)",
        "answer": "Це процес, у якому браузер рендерить візуальні елементи на екрані, базуючись на результатах попередніх етапів рендерингу, таких як layout (макет) і reflow (рефлоу). Після того як браузер визначив, де і як повинні розміщуватися елементи (layout), він переходить до етапу painting, де заповнює ці області кольорами, текстом, зображеннями та іншими візуальними елементами."
    }
]